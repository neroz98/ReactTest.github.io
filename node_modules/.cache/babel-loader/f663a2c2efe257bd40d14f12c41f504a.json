{"ast":null,"code":"import _classCallCheck from \"/Users/tatyana/app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/tatyana/app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/tatyana/app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/tatyana/app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/tatyana/app/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/tatyana/app/src/search/ProductTable.js\";\n\nvar ProductTable =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(ProductTable, _React$Component);\n\n  function ProductTable() {\n    _classCallCheck(this, ProductTable);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(ProductTable).apply(this, arguments));\n  }\n\n  _createClass(ProductTable, [{\n    key: \"render\",\n    value: function render() {\n      var _this = this;\n\n      // Cоздаем переменные rows и lastCategory \n      var rows = [];\n      var lastCategory = null; // Выводим в консоль значение this.props.inStockOnly (товар в наличии или нет) \n\n      console.log(this.props.inStockOnly); // Перебираем в цикле массив объектов с описанием, разделом и ценой продуктов \n\n      this.props.products.forEach(function (product) {\n        // Проверяем записи о продуктах на соотвествие фильтру из поиска и наличию товара \n        if (product.name.indexOf(_this.props.filterText) === -1 || !product.stocked && _this.props.inStockOnly) {\n          // При соотвествии условий ничего не отправляем \n          return; // Сортируем товары по категориям и добавляем заголовки категорий \n        } else if (product.category !== lastCategory) {\n          rows.push(React.createElement(ProductCategoryRow, {\n            category: product.category,\n            key: product.category,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 16\n            },\n            __self: this\n          }));\n        } // Добавляем товары в виде компонентов в массив rows \n\n\n        rows.push(React.createElement(ProductRow, {\n          product: product,\n          key: product.name,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 19\n          },\n          __self: this\n        })); // Записываем в переменную lastCategory текущую категорию товара \n\n        lastCategory = product.category;\n      }); // Возвращаем таблицу с заголовками колонок и контентом записаным в массив rows \n\n      return React.createElement(\"table\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 29\n        },\n        __self: this\n      }, \" \\u041D\\u0430\\u0437\\u0432\\u0430\\u043D\\u0438\\u0435 \"), React.createElement(\"th\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 30\n        },\n        __self: this\n      }, \" \\u0426\\u0435\\u043D\\u0430 \"))), React.createElement(\"tbody\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33\n        },\n        __self: this\n      }, \" \", rows, \" \"));\n    }\n  }]);\n\n  return ProductTable;\n}(React.Component);","map":{"version":3,"sources":["/Users/tatyana/app/src/search/ProductTable.js"],"names":["ProductTable","rows","lastCategory","console","log","props","inStockOnly","products","forEach","product","name","indexOf","filterText","stocked","category","push","React","Component"],"mappings":";;;;;;;IAAMA,Y;;;;;;;;;;;;;6BACG;AAAA;;AACT;AACA,UAAIC,IAAI,GAAG,EAAX;AACA,UAAIC,YAAY,GAAG,IAAnB,CAHS,CAIT;;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAY,KAAKC,KAAL,CAAWC,WAAvB,EALS,CAMT;;AACA,WAAKD,KAAL,CAAWE,QAAX,CAAoBC,OAApB,CAA4B,UAACC,OAAD,EAAa;AACzC;AACA,YAAIA,OAAO,CAACC,IAAR,CAAaC,OAAb,CAAqB,KAAI,CAACN,KAAL,CAAWO,UAAhC,MAAgD,CAAC,CAAjD,IAAuD,CAACH,OAAO,CAACI,OAAT,IAAoB,KAAI,CAACR,KAAL,CAAWC,WAA1F,EAAwG;AACxG;AACA,iBAFwG,CAGxG;AACC,SAJD,MAIO,IAAIG,OAAO,CAACK,QAAR,KAAqBZ,YAAzB,EAAuC;AAC9CD,UAAAA,IAAI,CAACc,IAAL,CAAU,oBAAC,kBAAD;AAAoB,YAAA,QAAQ,EAAEN,OAAO,CAACK,QAAtC;AAAgD,YAAA,GAAG,EAAEL,OAAO,CAACK,QAA7D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAV;AACC,SARwC,CASzC;;;AACAb,QAAAA,IAAI,CAACc,IAAL,CAAU,oBAAC,UAAD;AAAY,UAAA,OAAO,EAAEN,OAArB;AAA8B,UAAA,GAAG,EAAEA,OAAO,CAACC,IAA3C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAV,EAVyC,CAWzC;;AACAR,QAAAA,YAAY,GAAGO,OAAO,CAACK,QAAvB;AAEC,OAdD,EAPS,CAsBT;;AACA,aACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8DADA,EAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sCAFA,CADA,CADA,EAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAUb,IAAV,MAPA,CADA;AAWC;;;;EAnC0Be,KAAK,CAACC,S","sourcesContent":["class ProductTable extends React.Component { \nrender() { \n// Cоздаем переменные rows и lastCategory \nlet rows = []; \nlet lastCategory = null; \n// Выводим в консоль значение this.props.inStockOnly (товар в наличии или нет) \nconsole.log(this.props.inStockOnly) \n// Перебираем в цикле массив объектов с описанием, разделом и ценой продуктов \nthis.props.products.forEach((product) => { \n// Проверяем записи о продуктах на соотвествие фильтру из поиска и наличию товара \nif (product.name.indexOf(this.props.filterText) === -1 || (!product.stocked && this.props.inStockOnly)) { \n// При соотвествии условий ничего не отправляем \nreturn; \n// Сортируем товары по категориям и добавляем заголовки категорий \n} else if (product.category !== lastCategory) { \nrows.push(<ProductCategoryRow category={product.category} key={product.category} />); \n} \n// Добавляем товары в виде компонентов в массив rows \nrows.push(<ProductRow product={product} key={product.name} />); \n// Записываем в переменную lastCategory текущую категорию товара \nlastCategory = product.category; \n\n}); \n// Возвращаем таблицу с заголовками колонок и контентом записаным в массив rows \nreturn ( \n<table> \n<thead> \n<tr> \n<th> Название </th> \n<th> Цена </th> \n</tr> \n</thead> \n<tbody> { rows } </tbody> \n</table> \n); \n} \n}"]},"metadata":{},"sourceType":"module"}